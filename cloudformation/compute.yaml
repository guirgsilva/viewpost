AWSTemplateFormatVersion: '2010-09-09'
Description: 'ViewPost Application Deployment with EC2, Auto Scaling, and Application Load Balancer'

Parameters:
  VPCId:
    Type: String
    Description: 'The ID of the VPC'
  
  PublicSubnet1:
    Type: String
    Description: 'The ID of the first public subnet'
  
  PublicSubnet2:
    Type: String
    Description: 'The ID of the second public subnet'

Resources:
  ViewPostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for ViewPost application'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ViewPostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ViewPostRole

  ViewPostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Policies:
        - PolicyName: ViewPostAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                Resource: 
                  - 'arn:aws:s3:::*/*'
                  - 'arn:aws:s3:::*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::aws-codedeploy-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-codedeploy-${AWS::Region}'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ViewPostLaunchTemplate
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}"
        SecurityGroupIds:
          - !Ref ViewPostSecurityGroup
        IamInstanceProfile:
          Name: !Ref ViewPostInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Update system and install dependencies
            yum update -y
            yum install -y python3-pip git python3-devel gcc python3-psutil ruby wget

            # Install CodeDeploy Agent
            wget https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            systemctl enable codedeploy-agent
            systemctl start codedeploy-agent

            # Clean up existing files
            rm -rf /opt/viewpost/*
            rm -rf /opt/viewpost/.git
            rm -rf /opt/viewpost/scripts
            rm -f /etc/systemd/system/viewpost.service

            # Set up application directory and environment
            mkdir -p /opt/viewpost/scripts
            chmod -R 755 /opt/viewpost
            chown -R ec2-user:ec2-user /opt/viewpost

            cd /opt/viewpost
            git clone https://github.com/guirgsilva/viewpost.git .
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            
            # Create log directory with proper permissions
            mkdir -p /var/log/viewpost
            chown -R ec2-user:ec2-user /var/log/viewpost
            
            # Configure systemd service for the application
            cat > /etc/systemd/system/viewpost.service << 'EOF'
            [Unit]
            Description=ViewPost Web Application
            After=network.target

            [Service]
            Type=simple
            User=ec2-user
            WorkingDirectory=/opt/viewpost
            Environment="PATH=/opt/viewpost/venv/bin"
            Environment="FLASK_APP=app"
            ExecStart=/opt/viewpost/venv/bin/flask run --host=0.0.0.0 --port=80
            Restart=always
            RestartSec=5
            TimeoutStartSec=0
        
            [Install]
            WantedBy=multi-user.target
            EOF

            # Set appropriate permissions for service file
            chmod 644 /etc/systemd/system/viewpost.service
            systemctl daemon-reload

            # Enable and start the application service
            systemctl enable viewpost
            systemctl start viewpost
            journalctl -u viewpost -f --no-pager &

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ViewPostALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ViewPostSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 5000
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ViewPostTG
      VpcId: !Ref VPCId
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: ViewPost-Instance
          PropagateAtLaunch: true

Outputs:
  ApplicationLoadBalancerName:
    Description: 'Name of the Application Load Balancer'
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub "${AWS::StackName}-ApplicationLoadBalancerName"

  AutoScalingGroupName:
    Description: 'Name of the Auto Scaling Group'
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-AutoScalingGroupName"

  ALBTargetGroupName:
    Description: 'Name of the ALB Target Group'
    Value: !GetAtt ALBTargetGroup.TargetGroupName
    Export:
      Name: !Sub "${AWS::StackName}-TargetGroupName"